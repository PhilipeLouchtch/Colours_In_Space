/* 	Received message format: 

	msg(x, .*)  

	x   ->	Global volume of generated sound. Normalized float, 100% is 1.0

	rest->	enumerated colour corresponding to the ~frequencies array index
			the amount of colour arguments is equal to the number in the chat header
			(/boxes3: 3, /boxes5: 5, /boxes7: 7)
 */
 
(	
	o = OSCresponder(nil, '/boxes3', 
									  {
										  |t, r, msg| 
										  ("time:" + t).postln;
										  msg.postln;
										  ~targetsReceived = 3;
										  ~msg = msg;
									  }).add;
	o = OSCresponder(nil, '/boxes5', 
									  { 
										  |t, r, msg| 
										  ("time:" + t).postln;
										  msg.postln;
										  ~targetsReceived = 5;
										  ~msg = msg;
									  }).add;
	o = OSCresponder(nil, '/boxes7', 
									  { 
										  |t, r, msg| 
										  ("time:" + t).postln; 
										  msg.postln; 
										  ~targetsReceived = 7; 
										  ~msg = msg;
									  }).add;

	~msg = -1;
	~currentTargets = 0;

	// Frequencies of the chromatic scale from F3 to E4. 
	~frequencies = Array.with(174.61, 185.0, 196.0, 207.65, 220.0, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63);
	
	// Positioning information per amount of Targets
	~positions3 = Array.with(-1, 0, 1);
	~positions5 = Array.with(-1, -0.5, 0, 0.5, 1);
	~positions7 = Array.with(-1, -0.66, -0.33, 0, 0.33, 0.66, 1);

	// Default tone
	SynthDef.new('sonochromatic', {
		 |freq, pos, vol| //parameters to be controlled by Kinect: colour, position and volume
		 var sin, pan; 
		 sin = SinOsc.ar(freq:freq, mul:vol);
		 pan = Pan2.ar(sin, pos);
		 Out.ar(0, pan);
	}).add;
	 
	// Formant Synth
	SynthDef.new('formant', {
		 |freq, pos, vol, formant| 
		 var sin, pan;
		 sin = Formant.ar(fundfreq:freq, formfreq:formant, mul:vol);
		 pan = Pan2.ar(sin, pos);
		 Out.ar(0, pan);
	}).add;
)


/* Prepare the Arrays with synths */
(
	~synths3 = Array.fill(3, {Synth.new(\formant)});
	~synths5 = Array.fill(5, {Synth.new(\formant)});
	~synths7 = Array.fill(7, {Synth.new(\formant)});
)

(
	Routine
	{
	 	var msgTest; // Shitty and not "correct" SClang folding optimizations force me to do this
	 	msgTest = ~msg; 
		while (msgTest == -1) { 0.02.wait; }
		{
			if (~targetsReceived == 3,
			{
				if (~currentTargets != 3,
				{
					~synths5.collect(
					{ 
							arg item, i;
							item.set(\vol, 0.0);
					});
					~synths7.collect(
					{ 
							arg item, i;
							item.set(\vol, 0.0);
					});
					~currentTargets = 3;
				});
				~synths3.collect(
				{ 
				
					arg item, i;
					~convert = ~frequencies.at(~msg.at(i+2));
					~formant = 2.1**~msg.at(i+2) + 200;
					~volume  = 0.2 * ~msg[1];
					item.set(\freq, ~convert, \pos, ~positions3[i],\vol, ~volume, \formant, ~formant);
				});
			});
			if (~targetsReceived == 5,
			{
				if (~currentTargets != 5,
				{
					~synths3.collect(
					{ 
				
							arg item, i;
							item.set(\vol, 0.0);
					});
					~synths7.collect(
					{ 
							arg item, i;
							item.set(\vol, 0.0);
					});
				~currentTargets = 5;
				});
				~synths5.collect(
				{ 
					arg item, i;
					~convert = ~frequencies.at(~msg.at(i+2));
					~formant = 2.1**~msg.at(i+2) + 200;
					~volume  = 0.2 * ~msg[1];
					item.set(\freq, ~convert, \pos, ~positions5[i],\vol, ~volume, \formant, ~formant);
				});
			});
			if (~targetsReceived == 7,
			{
				if (~currentTargets != 7,
				{
					~synths3.collect(
					{ 
				
							arg item, i;
							item.set(\vol, 0.0);
					});
					~synths5.collect(
					{ 
							arg item, i;
							item.set(\vol, 0.0);
					});
				~currentTargets = 7;
				});
				~synths7.collect(
				{ 
					arg item, i;
					~convert = ~frequencies.at(~msg.at(i+2));
					~formant = 2.1**~msg.at(i+2) + 200;
					~volume  = 0.2 * ~msg[1];
					item.set(\freq, ~convert, \pos, ~positions7[i],\vol, ~volume, \formant, ~formant);
				});
			});
			0.02.wait;
		}.loop
	}.play;
)

// OSC send test:
m = NetAddr("127.0.0.1", 57120);
m.sendMsg('/boxes3', 0.8, 1, 3, 5);
m.sendMsg('/boxes5', 0.8, 1, 3, 5, 7, 9, [1, 2, 3]);
m.sendMsg('/boxes7', 0.8, 1, 3, 5, 7, 5, 3, 1);
m.sendMsg('/boxes7', 0.1, 1, 3, 5, 7, 5, 3, 1);
